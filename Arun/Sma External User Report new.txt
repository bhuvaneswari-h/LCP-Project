var searchParams = new URLSearchParams(window.location.search);

let dummydata;

var userId = parseInt(searchParams.get("userId") || "0");
var assessmentId = parseInt(searchParams.get("surveyId") || "0");

console.log("userId", userId);
console.log("assessmentId", assessmentId);

function loadData() {
    fetch(window.__PATH__.appUrls.businessIntelligence + "api/process-api/sma/externaluserreport", {
        method: "POST",
        headers: {
            'Content-Type': 'application/json',
            "X-API-Endpoint": "U2FsdGVkX18LfRdV8Qu68Pd2hgFUlGaGeoILfBxpSvgXqdjlnq6wPsABDfSD5tiarMn7nczPfWuwkJn2CmhK/4gWEn6h3aeVH0Yh9RPB1BMcziJg4F5E3EtKVF0e3gI23MOX+fZi96YlfdgBTAhPiwivp6f3VSIq4BfjQ35LXAhcisCJH4I2hBIzYLiOOXfDq4x0JXy1PaxRaC7eBAWw9ayurD3iAve9VIFeRPlZqd8lVPCWX69R6fQwT9M34Tvw"
        },
        body: JSON.stringify({
            "userId": userId,
            "assessmentId": assessmentId
        })
    }).then(async (res) => {
        let data = await res.json();
        this.dummydata = data;
        console.log("User Report", data.reportData);
let category_length = data.reportData[0].subjects.length;

        console.log("total category", category_length);
        setupScreen(data);


    });

}
function setupScreen(responseData) {
    const reportData = responseData.reportData;
    console.log("dhfkshfskdjfh",reportData);
    const container = document.getElementById('surveyContainer');
    if (!container) {
        console.error("Container element not found.");
        return;
    }

    if (!Array.isArray(reportData) || reportData.length === 0) {
        console.error("No report data available.");

        const noDataMsg = document.createElement('h2');
        noDataMsg.textContent = 'No report data available.';
        noDataMsg.style.textAlign = 'center'; // Optional: center the message
        container.appendChild(noDataMsg);

        return;
    }

    container.className = 'surveyContainer';
    container.innerHTML = '';

    // Flex container for tabs and download icon
    const flexContainer = document.createElement('div');
    flexContainer.style.display = 'flex';
    flexContainer.style.justifyContent = 'space-between';
    flexContainer.style.alignItems = 'center';

    // Create Tabs
    const tabs = document.createElement('div');
    tabs.className = 'tabs';
    const tabUsers = document.createElement('button');
    tabUsers.textContent = 'My Report';
    tabUsers.className = 'tablinks';
    tabs.appendChild(tabUsers);
    flexContainer.appendChild(tabs);

    // Download icon button
    const downloadIcon = document.createElement('button');
    downloadIcon.className = 'download-btn';
    downloadIcon.innerHTML = '<i class="fas fa-download"></i>'; // Using Font Awesome icon
    downloadIcon.onclick = downloadCSVReport;
    flexContainer.appendChild(downloadIcon);

    container.appendChild(flexContainer);

    // Tab content container
    const usersContent = document.createElement('div');
    usersContent.id = 'Users';
    usersContent.className = 'tabcontent';
    container.appendChild(usersContent);

    // Default open Users Report
    usersContent.style.display = 'block';
    tabUsers.className += ' active';

    // Implementing tab logic
    tabUsers.onclick = function () {
        openTab('Users');
        const allTabs = document.querySelectorAll('.tablinks');
        allTabs.forEach(tab => tab.classList.remove('active'));
        tabUsers.classList.add('active');
    };

    function openTab(tabName) {
        let tabcontent = document.getElementsByClassName("tabcontent");
        let tablinks = document.getElementsByClassName("tablinks");
        for (let i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        for (let i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        event.currentTarget.className += " active";
    }

    // Function to handle the downloading logic
    function downloadCSVReport() {
        processDataAndDownloadCSV(reportData);
    }

    // Populate data into 'Users' tab
    populateUsersReport(usersContent, reportData);

    // Create chart containers and render charts
    // reportData.forEach((data, index) => {
    //     const chartContainer = document.createElement('div');
    //     chartContainer.id = `donutChart${index}`;
    //     usersContent.appendChild(chartContainer);

    //     // Assuming each data item corresponds to a separate chart
    //     renderChart(`#donutChart${index}`, data);
    // });
}


function populateUsersReport(usersContent, data) {
    const userHeaderRow = document.createElement('div');
    userHeaderRow.className = 'header-row';
    usersContent.appendChild(userHeaderRow);

    const userDetailsContainer = document.createElement('div');
    userDetailsContainer.id = 'userDetailsContainer';
    userDetailsContainer.className = 'details-container';
    usersContent.appendChild(userDetailsContainer);

    data.forEach(userReport => {
        const userName = userReport.userName;
        const averageScore = calculateAverageUserScore(userReport.subjects);
        const userButton = document.createElement('button');
        userButton.className = 'tab-button';
        userButton.textContent = `${userName} - Avg Score: ${averageScore}`;
        userButton.onclick = () => {
            const allButtons = usersContent.parentNode.querySelectorAll('.tab-button');
            allButtons.forEach(btn => btn.classList.remove('active-button'));
            userButton.classList.add('active-button');
            loadUserDetails(userName, userReport.subjects, userDetailsContainer);
        };
        userHeaderRow.appendChild(userButton);
    });
}

function calculateAverageUserScore(subjects) {
    let totalScore = 0;
    let totalCount = 0;

    subjects.forEach(subject => {
        subject.questions.forEach(question => {
            totalScore += question.score;
            totalCount++;
        });
    });

    return totalCount > 0 ? (totalScore / totalCount).toFixed(2) : "No Data";
}

function loadUserDetails(userName, userData, userDetailsContainer) {
    userDetailsContainer.innerHTML = ''; // Clear existing contents

    // Create container for two columns
    const twoColumnContainer = document.createElement('div');
    twoColumnContainer.className = 'two-column-container';
    twoColumnContainer.style.display = 'flex';

    // Create two columns within the container
    const leftColumn = document.createElement('div');
    leftColumn.className = 'left-column';
    leftColumn.style.flex = '1';

    const rightColumn = document.createElement('div');
    rightColumn.className = 'right-column';
    rightColumn.style.flex = '1';

    // Add both columns to the main container
    twoColumnContainer.appendChild(leftColumn);
    twoColumnContainer.appendChild(rightColumn);

    function createSubjectBox(subjectName, subjectData) {
        const subjectBox = document.createElement('div');
        subjectBox.className = 'subject-box';
        subjectBox.style.border = '1px solid #ccc';  // Adds a border to each subject box
        subjectBox.style.marginTop = '10px';        
        subjectBox.style.marginRight = '4px';          

        let totalScore = 0;
        let totalCount = 0;
        subjectData.questions.forEach(question => {
            totalScore += question.score;
            totalCount++;
        });

        const averageScore = totalCount > 0 ? (totalScore / totalCount).toFixed(2) : "No Data";

        const subjectHeader = document.createElement('div');
        subjectHeader.className = 'subject-header';
        subjectHeader.textContent = `${subjectData.subjectName} - Avg Score: ${averageScore}`;
        subjectBox.appendChild(subjectHeader);

        const questionsContainer = document.createElement('div');
        questionsContainer.className = 'questions-container';
        questionsContainer.style.marginBottom = '10px';  

        subjectData.questions.forEach(question => {
            const questionDiv = document.createElement('div');
            questionDiv.className = 'question-score-container';

            const questionTextDiv = document.createElement('div');
            questionTextDiv.className = 'question-text';
            questionTextDiv.textContent = question.questionText;
            questionTextDiv.style.marginLeft = '10px';

            const progressBarContainer = document.createElement('div');
            progressBarContainer.className = 'progress-bar-container';
            progressBarContainer.style.marginLeft = '10px';

            const progressBar = document.createElement('div');
            progressBar.className = 'progress-bar';
            const questionScore = question.score;
            const maxScore = question.maxScore;
            const scoreRatio = maxScore > 0 ? (questionScore / maxScore) : 0;
            progressBar.style.width = `${scoreRatio * 100}%`;

            const scoreText = document.createElement('div');
            scoreText.className = 'score-text';
            scoreText.textContent = questionScore.toFixed(2);

            progressBarContainer.appendChild(progressBar);
            progressBar.appendChild(scoreText);
            questionDiv.appendChild(questionTextDiv);
            questionDiv.appendChild(progressBarContainer);
            questionsContainer.appendChild(questionDiv);
        });

        subjectBox.appendChild(questionsContainer);
        return subjectBox;
    }

    userData.forEach((subject, index) => {
        if (index % 2 === 0) {
            leftColumn.appendChild(createSubjectBox(subject.subjectName, subject));
        } else {
            rightColumn.appendChild(createSubjectBox(subject.subjectName, subject));
        }
    });

    // Add the main container to the details section
    userDetailsContainer.appendChild(twoColumnContainer);
}

function processDataAndDownloadCSV(reportData) {
    let csvContent = "data:text/csv;charset=utf-8,";
    csvContent += "User Name,Subject,Question,Score,Max Score\n"; // Header row

    reportData.forEach(userReport => {
        const userName = userReport.userName;

        userReport.subjects.forEach(subject => {
            const subjectName = subject.subjectName;

            subject.questions.forEach(question => {
                const questionText = question.questionText;
                const score = question.score;
                const maxScore = question.maxScore;
                csvContent += `${userName},${subjectName},${questionText},${score},${maxScore}\n`;
            });
        });
    });

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "user_report.csv");
    document.body.appendChild(link); // Required for FF

    link.click();
    document.body.removeChild(link); // Clean up after download
}

loadData();

const filteredCharts = response.Charts.value.filter(chart => chart.surveyId == assessmentId).map(chart => chart.ChartsId);

const loadScript = (FILE_URL, async = true, type = "text/javascript", integrity = "", crossorigin = "") => {
  return new Promise((resolve, reject) => {
    try {
      const scriptEle = document.createElement("script");
      scriptEle.type = type;
      scriptEle.async = async;
      scriptEle.src = FILE_URL;

      if (integrity) {
        scriptEle.integrity = integrity;
      }

      if (crossorigin) {
        scriptEle.crossOrigin = crossorigin;
      }

      scriptEle.addEventListener("load", () => {
        resolve({ status: true });
      });

      scriptEle.addEventListener("error", () => {
        reject({
          status: false,
          message: `Failed to load the script ${FILE_URL}`
        });
      });

      document.body.appendChild(scriptEle);
    } catch (error) {
      reject(error);
    }
  });
};

loadScript("https://cdn.amcharts.com/lib/5/index.js")
  .then(() => loadScript("https://cdnjs.cloudflare.com/ajax/libs/apexcharts/3.49.1/apexcharts.min.js"))
  .then(() => {
    loadChart();
  });


    function loadChart() {


fetch(window.__PATH__.appUrls.businessIntelligence + "api/process-api/sma/externaluserreport", {
        method: "POST",
        headers: {
            'Content-Type': 'application/json',
            "X-API-Endpoint": "U2FsdGVkX18LfRdV8Qu68Pd2hgFUlGaGeoILfBxpSvgXqdjlnq6wPsABDfSD5tiarMn7nczPfWuwkJn2CmhK/4gWEn6h3aeVH0Yh9RPB1BMcziJg4F5E3EtKVF0e3gI23MOX+fZi96YlfdgBTAhPiwivp6f3VSIq4BfjQ35LXAhcisCJH4I2hBIzYLiOOXfDq4x0JXy1PaxRaC7eBAWw9ayurD3iAve9VIFeRPlZqd8lVPCWX69R6fQwT9M34Tvw"
        },
        body: JSON.stringify({
            "userId": userId,
            "assessmentId": assessmentId
        })
    }).then(async (res) => {
        let data = await res.json();
        let category_length = data.reportData[0].subjects.length;
        console.log("hihihihih", filteredCharts);

        if(filteredCharts == 1)
        {
        for (let i = 0; i < category_length; i++) {
            
            new ApexCharts(document.querySelector("#donutChart"+i), {
                series: [44, 55, 13, 43, 22],
                chart: {
                    width: 500,
                    type: 'donut',
                },
                labels: ['Apples', 'Oranges', 'Bananas', 'Grapes', 'Pineapples'],
                responsive: [{
                    breakpoint: 480,
                    options: {
                        chart: {
                            width: 300
                        },
                        legend: {
                            position: 'bottom'
                        }
                    }
                }],
                fill: {
                    type: 'gradient',
                },
                colors: ['#008FFB', '#00E396', '#FEB019', '#FF4560', '#775DD0'],
                legend: {
                    position: 'right',
                    offsetY: 0,
                    height: 230,
                }
            }).render();
        }
        }

    });

}

  



