
var searchParams = new URLSearchParams(window.location.search);
var surveyId = parseInt(searchParams.get("surveyId") || "0");
var userId = parseInt(searchParams.get("userId") || "0");
var openId = parseInt(searchParams.get("isOpen") || "0");
var surveyUserId = parseInt(searchParams.get("surveyUserId") || "0");
var registerSuccess = parseInt(searchParams.get("registerSuccess") || "0");

// var openId = userId > 100000 ? 1 : 0;

console.log("surveyId", surveyId);
console.log("userId", userId);

function checkLockScreen(openId, surveyUserId, registerSuccess) {
    if (openId == 1 && registerSuccess == 1)
        return 'unlocked';
    else if (openId == 1 && surveyUserId == 0)
        return 'locked';
    else if (openId == 1 && userId < 100000)
        return 'unlocked';
    else if (openId == 0)
        return 'unlocked';
    return 'locked';
}

fetch(window.__PATH__.appUrls.businessIntelligence + "api/process-api/smasurvey/surveycatquesanswers", {
    method: "POST",
    headers: {
        'Content-Type': 'application/json',
        "X-API-Endpoint": "U2FsdGVkX1/1AVz6uCndFXpCDMSlYOG0SHkjoSOmJLkb9PC/IzjheowPdFP0xzTvqEwLfTMyn0CKR1+9ebfRX9BuAuSGXPbn0c+5RbRpKh0Rp0Zs9XGl8XwwhiXdpc2IR/x/r3AeTFgN8SB4THVOzJHjPKMsIbTmNw0zFI1l2sExWQdzp3PxsEv7hNQQ6T3xYiGWrlgYXoPb5HPo37SvdQprMP9av8EQn9WLaehho/SXsUjqb+Kl3a/qNMkXxPFO4mv/5hVIDaiXAakq3YcWGg=="
    },
    body: JSON.stringify({
        // "surveyId": '1',
        // "userId": '100020'
        "isOpen": openId,
        "registerSuccess": registerSuccess,
        "surveyUserId": surveyUserId,
        "surveyId": surveyId,
        "userId": userId
    })
}).then(async (res) => {
    let data = await res.json();
    transformData(data.data);
});

function setupScreen(responseData) {
    const reportData = responseData;

    const container = document.getElementById('surveyContainer');
    if (!container) {
        console.error("Container element not found.");
        return;
    }

    if (!reportData) {
        console.error("No report data available.");

        const noDataMsg = document.createElement('h2');
        noDataMsg.textContent = 'No report data available.';
        noDataMsg.style.textAlign = 'center'; // Optional: center the message
        container.appendChild(noDataMsg);

        return;
    }

    container.className = 'surveyContainer';
    container.innerHTML = '';

    // Flex container for tabs and download icon
    const flexContainer = document.createElement('div');
    flexContainer.style.display = 'flex';
    flexContainer.style.justifyContent = 'space-between';
    flexContainer.style.alignItems = 'center';

    // Create Tabs
    const tabs = document.createElement('div');
    tabs.className = 'tabs';


    const tabCharts = document.createElement('button');
    tabCharts.textContent = 'Charts';
    tabCharts.className = 'tablinks';

    const tabUsers = document.createElement('button');
    tabUsers.textContent = 'Users Report';
    tabUsers.className = 'tablinks';

    tabs.appendChild(tabUsers);
     tabs.appendChild(tabCharts);
    

    flexContainer.appendChild(tabs);

    // Download icon button
    const downloadIcon = document.createElement('button');
    downloadIcon.className = 'download-btn';
    downloadIcon.innerHTML = '<i class="fas fa-download"></i>'; // Using Font Awesome icon
    downloadIcon.onclick = downloadCSVReport;
    flexContainer.appendChild(downloadIcon);

    container.appendChild(flexContainer);

    // Tab content containers
    

     const chartContent = document.createElement('div');
    chartContent.id = 'Charts';
    chartContent.className = 'tabcontent';

    const usersContent = document.createElement('div');
    usersContent.id = 'Users';
    usersContent.className = 'tabcontent';

    
    container.appendChild(usersContent);
     container.appendChild(chartContent);

    // Default open Org Report
    usersContent.style.display = 'block';
    tabUsers.className += ' active';

tabCharts.onclick = function () {
        openTab('Charts');
        const allTabs = document.querySelectorAll('.tablinks');
        allTabs.forEach(tab => tab.classList.remove('active'));
        tabCharts.classList.add('active');
        renderCharts(chartContent, reportData);
    };


    // Implementing tab logic
   
    tabUsers.onclick = function () {
        openTab('Users');
        const allTabs = document.querySelectorAll('.tablinks');
        allTabs.forEach(tab => tab.classList.remove('active'));
        tabUsers.classList.add('active');
    };

    function openTab(tabName) {
        let tabcontent = document.getElementsByClassName("tabcontent");
        let tablinks = document.getElementsByClassName("tablinks");
        for (let i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        for (let i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        event.currentTarget.className += " active";
    }

    // Function to handle the downloading logic based on the active tab
    function downloadCSVReport() {
        processDataAndDownloadCSV(reportData)
    }

    // Populate data into 'Users' tab
    populateUsersReport(usersContent, reportData);

    // Populate data into 'Charts' tab
    populateOrgReport(chartContent, reportData);
}

function populateUsersReport(usersContent, data) {

    const app = document.createElement('div');
    app.id = 'survey-result'
    usersContent.appendChild(app);

    data.forEach((categoryData, index) => {
        const container = document.createElement('div');
        container.classList.add('container');
        container.appendChild(createCard(categoryData, index));
        app.appendChild(container);
    });

}

function renderCharts(chartContent, data) {
    // console.log("chart data", data);

    chartContent.innerHTML = ''; // Clear existing charts

    // Create a container for all charts
    const chartsDiv = document.createElement('div');
    chartsDiv.className = 'charts';

    // Create a container for the donut chart
    const donutChartBox = document.createElement('div');
    donutChartBox.className = 'chart-box';
    donutChartBox.id = 'donutChartBox';
    const donutChartDiv = document.createElement('div');
    donutChartDiv.id = 'donutChart';
    donutChartBox.appendChild(donutChartDiv);
    chartsDiv.appendChild(donutChartBox);

    // Create a container for the bar chart
    const barChartBox = document.createElement('div');
    barChartBox.className = 'chart-box';
    barChartBox.id = 'barChartBox';
    const barChartCanvas = document.createElement('canvas');
    barChartCanvas.id = 'barchart';
    barChartBox.appendChild(barChartCanvas);
    chartsDiv.appendChild(barChartBox);

    // Create a container for the radar chart
    const radarChartBox = document.createElement('div');
    radarChartBox.className = 'chart-box';
    radarChartBox.id = 'radarChartBox';
    const radarChartCanvas = document.createElement('canvas');
    radarChartCanvas.id = 'chartContainer1';
    radarChartCanvas.style.width = '50%';
    radarChartCanvas.style.height = '450px';
    radarChartCanvas.style.marginInline = 'auto';
    radarChartBox.appendChild(radarChartCanvas);
    chartsDiv.appendChild(radarChartBox);

    chartContent.appendChild(chartsDiv);

    // Now call loadChart function to render charts
    loadChart();
}





function transformData(data) {
    let obj = Object.values(data).map(category => {
        let questions = Object.values(category.questions);
        let totalScore = questions.reduce((acc, q) => acc + q.answers.selectedScore, 0);
        // let averageScore = totalScore / questions.length;
        let averageScore = (totalScore / questions.length).toFixed(2);
        return {
            category: category.categoryName,
            score: averageScore,
            items: questions.map(question => ({
                question: question.name,
                answer: question.answers.selectedScore,
                percentage: Math.round((question.answers.selectedScore / question.answers.totalScore) * 100)
            }))
        };
    });

    setupScreen(obj);

    // renderCards(obj);
}

function createCard(categoryData, index) {
    const card = document.createElement('div');
    card.classList.add('card');
    if (checkLockScreen(openId, surveyUserId, registerSuccess) == 'locked') {
        if (index > 0) {
            card.classList.add('locked');
            card.addEventListener('click', () => alert('Please register to view this category.'));
        }
    }
    const header = document.createElement('div');
    header.classList.add('header');
    const categoryName = document.createElement('div');
    categoryName.textContent = categoryData.category;
    const categoryScore = document.createElement('div');
    categoryScore.textContent = `Average: ${categoryData.score}`;
    header.appendChild(categoryName);
    header.appendChild(categoryScore);

    const body = document.createElement('div');
    body.classList.add('body');
    if (checkLockScreen(openId, surveyUserId, registerSuccess) == 'locked') {
        if (index > 0) body.classList.add('blur');
    }
    categoryData.items.forEach(item => {
        const itemContainer = document.createElement('div');
        itemContainer.classList.add('progress-container');
        const itemLabel = document.createElement('div');
        itemLabel.textContent = `${item.question}`; //- ${item.answer}
        itemContainer.appendChild(itemLabel);

        const progressBarContainer = document.createElement('div');
        progressBarContainer.classList.add('progress-bar-container');

        const progressBar = document.createElement('div');
        progressBar.classList.add('progress-bar');
        progressBar.style.width = `${item.percentage}%`;
        progressBar.textContent = `${item.answer}`;

        progressBarContainer.appendChild(progressBar);
        itemContainer.appendChild(progressBarContainer);

        //itemContainer.appendChild(progressBar);
        body.appendChild(itemContainer);
    });

    card.appendChild(header);
    card.appendChild(body);

    if (checkLockScreen(openId, surveyUserId, registerSuccess) == 'locked') {
        if (index > 0) {
            const lock = document.createElement('div');
            lock.classList.add('lock');
            lock.innerHTML = '&#x1f512;'; // Unicode for lock symbol
            card.appendChild(lock);
        }
    }

    return card;
}

// function renderCards(data) {
//     const app = document.getElementById('survey-result');
//     data.forEach((categoryData, index) => {
//         const container = document.createElement('div');
//         container.classList.add('container');
//         container.appendChild(createCard(categoryData, index));
//         app.appendChild(container);
//     });
// }

// window.postMessage({
//     messageType: "BODY_PADDING",
//     message: {
//         right: "0px"
//     }
// }, '*');
    //renderCards(transformedData);


    const filteredCharts = response.Charts.value.filter(chart => chart.SurveyId == surveyId).map(chart => chart.ChartsId);
// console.log("charts",response.Charts.value);

// console.log( "filter chart value" , filteredCharts);



const loadScript = (FILE_URL, async = true, type = "text/javascript", integrity = "", crossorigin = "") => {
    return new Promise((resolve, reject) => {
        try {
            const scriptEle = document.createElement("script");
            scriptEle.type = type;
            scriptEle.async = async;
            scriptEle.src = FILE_URL;

            if (integrity) {
                scriptEle.integrity = integrity;
            }

            if (crossorigin) {
                scriptEle.crossOrigin = crossorigin;
            }

            scriptEle.addEventListener("load", () => {
                resolve({ status: true });
            });

            scriptEle.addEventListener("error", () => {
                reject({
                    status: false,
                    message: `Failed to load the script ${FILE_URL}`
                });
            });

            document.body.appendChild(scriptEle);
        } catch (error) {
            reject(error);
        }
    });
};

loadScript("https://cdn.amcharts.com/lib/5/index.js")
    .then(() => loadScript("https://cdnjs.cloudflare.com/ajax/libs/apexcharts/3.49.1/apexcharts.min.js"))
    .then(() => loadScript("https://cdn.jsdelivr.net/npm/chart.js"))
    .then(() => loadScript("https://cdn.jsdelivr.net/npm/apexcharts"))
    .then(() => {
        loadChart();
    });


function loadChart() {
    fetch(window.__PATH__.appUrls.businessIntelligence + "api/process-api/sma/surveycatquesanswers", {
        method: "POST",
        headers: {
            'Content-Type': 'application/json',
            "X-API-Endpoint": "U2FsdGVkX1/1AVz6uCndFXpCDMSlYOG0SHkjoSOmJLkb9PC/IzjheowPdFP0xzTvqEwLfTMyn0CKR1+9ebfRX9BuAuSGXPbn0c+5RbRpKh0Rp0Zs9XGl8XwwhiXdpc2IR/x/r3AeTFgN8SB4THVOzJHjPKMsIbTmNw0zFI1l2sExWQdzp3PxsEv7hNQQ6T3xYiGWrlgYXoPb5HPo37SvdQprMP9av8EQn9WLaehho/SXsUjqb+Kl3a/qNMkXxPFO4mv/5hVIDaiXAakq3YcWGg=="
        },
        body: JSON.stringify({
            // "organizationId": organisationId,
            // "assessmentId": assessmentId

             "isOpen": openId,
        "registerSuccess": registerSuccess,
        "surveyUserId": surveyUserId,
        "surveyId": surveyId,
        "userId": userId
        })
    }).then(async (res) => {
        let data = await res.json();

          console.log("Assessment Report 1", data.data);
let category_length = data.reportData[0].subjects.length;
// const labels = data.reportData[0].subjects.map(subject => subject.subjectName);

const usersCount = data.reportData.length;
    const categoryScores = {};

    data.reportData.forEach(report => {
        report.subjects.forEach(subject => {
            if (!categoryScores[subject.subjectName]) {
                categoryScores[subject.subjectName] = { totalScore: 0, count: 0 };
            }

            const totalScore = subject.questions.reduce((acc, question) => acc + question.score, 0);
            categoryScores[subject.subjectName].totalScore += totalScore;
            categoryScores[subject.subjectName].count += 1;
        });
    });

    const labels = Object.keys(categoryScores);
    const scores = labels.map(label => {
        const { totalScore, count } = categoryScores[label];
        return Math.round(totalScore / usersCount);
    });


// Calculate the maximum possible score for each subject
const maxScores = data.reportData[0].subjects.map(subject => {
    const totalMaxScore = subject.questions.reduce((acc, question) => acc + question.maxScore, 0);
    return Math.round(totalMaxScore);
});

// Find the maximum maxScore across all subjects
const maxMaxScore = Math.max(...maxScores);


        console.log("labels", labels);
        console.log("scores", scores);
         console.log("maxscores", maxScores);

        const assessmentname = data.reportData[0].assessmentName;

        const donutChartBox = document.getElementById('donutChartBox');
        const barChartBox = document.getElementById('barChartBox');
        const radarChartBox = document.getElementById('radarChartBox');

        // Donut Chart
        if (filteredCharts.includes('2')) {
            for (let i = 0; i < category_length; i++) {
                const canvas = document.createElement("canvas");
                canvas.setAttribute("id", "donutChart" + i);
                canvas.classList.add("chart-container");
                canvas.style.cssText = "width: 800px; height: 600px;";
                document.querySelector("#donutChart").appendChild(canvas);

                const percentage = scores[i];
                const maxscores = maxScores[i]

                const data = {
                    labels,
                    datasets: [{
                        data: [percentage, maxscores - percentage],
                        backgroundColor: ['#4db6ac', '#e0e0e0'],
                        hoverBackgroundColor: ['#4db6ac', '#e0e0e0'],
                        borderWidth: 0,
                    }]
                };

                const options = {
                    cutout: '70%',
                    plugins: {
                        tooltip: {
                            enabled: false
                        },
                        legend: {
                            display: false
                        },
                        title: {
                            display: true,
                            text: `${labels[i]}: ${scores[i]} `, // Dynamic title based on category
                            font: {
                                size: 16
                            },
                            padding: {
                                top: 20,
                                bottom: 30
                            }
                        }
                    }
                };

                const ctx = document.querySelector("#donutChart" + i);
                new Chart(ctx, {
                    type: 'doughnut',
                    data,
                    options
                });
            }
        } else {
            donutChartBox.style.display = 'none';
        }
        
        // Radar Chart
        if (filteredCharts.includes('1')) {
    // Select the canvas element and set its width
    const radarChartCanvas = document.querySelector("#chartContainer1");
    radarChartCanvas.width = 700; // Set the desired width

    const dataradar = {
        labels: labels,
        datasets: [{
            label: 'Score ',
            data: scores,
            fill: true,
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            borderColor: 'rgb(54, 162, 235)',
            pointBackgroundColor: 'rgb(54, 162, 235)',
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: 'rgb(54, 162, 235)'
        }]
    };

    new Chart(radarChartCanvas, {
        type: 'radar',
        data: dataradar,
        options: {
            elements: {
                line: {
                    borderWidth: 3
                }
            },
            scales: {
                r: {
                    angleLines: {
                        display: true
                    },
                    suggestedMin: 0,
                    suggestedMax: maxScores 
                }
            },
            plugins: {
                legend: {
                    display: true,
                    position: 'top'
                },
                title: {
                    display: true,
                    text: assessmentname
                }
            }
        }
    });
} else {
    radarChartBox.style.display = 'none';
}

        // Bar Chart
        if (filteredCharts.includes('3')) {
    new Chart(document.querySelector("#barchart").getContext('2d'), {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: "Score",
                data: scores,
                backgroundColor: function (context) {
                    const baseHue = 185; // Base hue for #8ed1ca
                    const hueRange = 30; // Define the range for hue variation
                    const numBars = scores.length; // Get the number of bars
                    const colorHue = (baseHue - hueRange / 2 + (context.dataIndex * (hueRange / numBars))) % 360; // Calculate hue based on index and number of bars within the range
                    return `hsla(${colorHue}, 50%, 50%, 0.8)`; // Generate color string in HSLA format, keeping saturation and lightness consistent
                },
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                x: {
                    ticks: {
                        maxRotation: 0, // Reduce rotation to make labels more compact
                        minRotation: 0, // Ensure no rotation
                        width: 30,
                        padding: 5 // Adjust padding around labels if needed
                    }
                },
                y: {
                    beginAtZero: true,
                    max: maxMaxScore, // Set the maximum y-axis value to the maximum maxScore
                    ticks: {
                        callback: function (value) {
                            return value; // Remove the percentage sign
                        }
                    }
                }
            },
            plugins: {
                title: {
                    display: true,
                    text: assessmentname
                }
            }
        }
    });
} else {
    barChartBox.style.display = 'none';
}
    });
}
