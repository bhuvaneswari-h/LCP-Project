<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

<div id="surveyContainer" class="grid-container"></div>

<div class="charts">
          
                <div id="donutChart"> </div>
        <!-- <div id="donutChart"></div> -->
        <canvas id="barchart"   class="grid-container"></canvas>
        <canvas id="chartContainer1"   style="width:50%;height:450px !important ; margin-inline :auto;"></canvas>
</div>   
<!-- <div id = "donutChart1" class = "grid-container"></div> -->

 <!-- width="20" height="20" -->

   <!-- width: 50%;
    height: 350px !important;
    margin-inline: auto; -->

     <!--  -->





//////////////////////////////////////////////////////////////////////////////////////////////////////////



@import url("https://fonts.googleapis.com/css?family=Inter:wght@300;400;500;600;700;800;900&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800;900&display=swap");   


/* .chart-container {
            display: none;
        } */
.chart-container {
            display: inline-block;
            vertical-align: top;
            margin: 10px;
        }


 /* .charts {
    max-width: 1200px;
    margin-inline: auto;
    background-color: rgb(255, 255, 255); 
    border: 2px solid rgba(119, 28, 28, 0.1);
    box-shadow: inset 0 6px 8px rgba(119, 28, 28, 0.1); 
    padding-block: 10px;
    font-family: 'Inter', sans-serif;
    color: #01497C; 
    height: 400px;
    margin-top:50px;
} */ 

/* .donutChart1{
     width: 100%;
    background-color: rgb(255, 255, 255); /* White background for the container */
    /* box-shadow: 0 6px 8px rgba(0,0,0,0.1); /* Soft shadow for depth */
    /* padding: 20px; */
    /* font-family: 'Inter', sans-serif; */
    /* color: #01497C; Deep air color for text */
    /* margin-top:50px; */ */
/* } */


/* General container and font settings */
.surveyContainer {
    width: 100%;
    max-width: 1200px;
    margin: auto;
    background-color: #fff; /* White background for the container */
    box-shadow: 0 4px 8px rgba(0,0,0,0.1); /* Soft shadow for depth */
    padding: 20px;
    font-family: 'Inter', sans-serif;
    color: #01497C; /* Deep air color for text */
}

/* Style for the tabs */
.tabs {
    overflow: hidden;
    background-color: #C6E7E4; /* Light water color for tabs background */
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
}

.tabs button {
    background-color: inherit;
    float: left;
    border: none;
    outline: none;
    cursor: pointer;
    padding: 14px 16px;
    transition: 0.3s;
    font-size: 17px;
    color: #01497C; /* Matching text color to the general text */
}

.tabs button:hover {
    background-color: #005E6A; /* Dark water color for hover */
    color: #fff; /* White text on hover */
}

.tabs button.active {
    background-color: #005E6A; /* Dark water color for active tab */
    color: #fff; /* White text for active tab */
}

/* Style for tab content */
.tabcontent {
    display: none;
    padding: 6px 12px;
    border: 1px solid #C6E7E4; /* Light water color for border */
    border-top: none;
    border-bottom-left-radius: 5px;
    border-bottom-right-radius: 5px;
    background-color: #f4f4f4; /* Very light grey for content background */
}

/* Style for specific content elements within tabs */
.item-title, .subject-header {
    font-family: 'Poppins', sans-serif;
    color: #005E6A; /* Dark water color for titles */
    font-size: 20px;
    padding: 10px;
}

.subject-header {
    background-color: #C6E7E4; /* Light water color for header background */
    color: #01497C; /* Deep air color for text */
    padding: 10px;
    margin-bottom: 15px; /* Increased space between headers and content */    
    cursor: pointer;
    font-weight: bold;
}

.progress-bar {
    background-color: #C6E7E4; /* Light water color for progress bar background */
    border-radius: 5px;
    padding: 3px;
    width: 100%; /* Full width of the content area */
}

.progress-bar-fill {
    background-color: #2A6F97; /* Darker brand color for progress bar fill */
    height: 20px; /* Fixed height for the fill bar */
    border-radius: 2px;
    transition: width 0.5s ease-in-out; /* Smooth transition for animation */
}

.details-container {
    margin-top: 20px;
    padding: 10px;
    background-color: #E9F6F4; /* Very light blue for the details background */
}

.details-container ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

.details-container li {
    margin-bottom: 10px;
    padding: 5px 0;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

question-text {
    flex-grow: 1;
}

.header-row {
    display: flex;
    flex-wrap: wrap;
    align-items: flex-start; /* Aligns items to the top */
    justify-content: start;
    padding: 10px 0;
}


.tab {
    overflow: hidden;
    border: 1px solid #ccc;
    background-color: #f1f1f1;
}

/* Style the buttons inside the tab */
.tab button {
    background-color: inherit;
    float: left;
    border: none;
    outline: none;
    cursor: pointer;
    padding: 14px 16px;
    transition: 0.3s;
    font-size: 17px;
}

/* Change background color of buttons on hover */
.tab button:hover {
    background-color: #ddd;
}

/* Create an active/current tablink class */
.tab button.active {
    background-color: #ccc;
}

/* Style the tab content (and add display:none to hide not active content by default) */
.tabcontent {
    display: none;
    padding: 6px 12px;
    border: 1px solid #ccc;
    border-top: none;
}

/* Additional styles for report details */
.subject-report, .user-report {
    border: 1px solid #ccc;
    margin: 10px 0;
    padding: 10px;
}

.subject-report h3, .user-report h3 {
    color: #333;
    margin: 5px 0;
}

.score-text{
    color: white;
}

.tab-button {
    margin-right: 10px;
    padding: 5px 10px;
    background-color: #f1f1f1;
    border: 1px solid #ccc;
    cursor: pointer;
}

.progress-bar-container {
    background-color: #ADD4E4; /* Light blue for the empty part of the bar */
    width: 70%; /* Adjust based on your layout */
    height: 20px;
    border-radius: 10px;
    overflow: hidden;
    position: relative;
}

.progress-bar {
    background-color: #005E6A; /* Dark water color for progress fill */
    height: 100%;
    transition: width 0.3s ease;
}

.progress-text {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: #ffffff;
    font-weight: bold;
}

.download-btn {
    background-color: #4CAF50; /* Green background */
    border: none;
    color: white; /* White text */
    padding: 10px 20px; /* Padding around the text */
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
    margin: 4px 2px;
    transition: 0.3s;
    cursor: pointer;
    border-radius: 5px; /* Rounded corners */
    box-shadow: 0 2px 5px rgba(0,0,0,0.3); /* Shadow for 3D effect */
    width: 150px; /* Fixed width */            
}

/* Hover effect for the button */
.download-btn:hover {
    background-color: #45a049; /* Darker shade of green */
}

/* Styles specific to the icon within the button */
.download-btn i {
    margin-right: 8px; /* Space between icon and text */
    font-size: 20px; /* Larger icon size */
}

.active-button {
    background-color: #005E6A; /* Example blue color */
    color: white;
    border-color: #005E6A;
}

#donutChart{
    display: flex;
    /* width: 100% !important;
    height: 350px !important;
    overflow-x: auto; */
    
}

/* #donutChart > *{
    flex: 1;
}


#chartContainer1{
    width: 50%;
    height: 350px !important;
    margin-inline: auto;
} */


.chart-container {
            position: relative;
            width: 100px;
            height: 100px;
            margin: auto;
            display: flex;
        }
/*  */


#chartContainer {
    border: 1px solid #ddd;
    padding: 10px;
}

        /* .chart-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 20px;
            font-weight: bold;
        } */

        .charts {
            max-width: 800px;
            margin-inline: auto;
            background-color: rgb(255, 255, 255); /* White background for the container */
            border: 2px solid rgba(119, 28, 28, 0.1);
            box-shadow: inset 0 6px 8px rgba(119, 28, 28, 0.1); /* Soft shadow for depth */
            padding-block: 10px;
            font-family: 'Inter', sans-serif;
            color: #01497C; /* Deep air color for text */
            height: auto;
            margin-top: 50px;
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
        }

        /* #donutChart0 {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 20px;
        }
         #donutChart1 {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 20px;
        } */

        #barchart, #chartContainer1 {
            display: none;
        }








//////////////////////////////////////////////////////////////////////////////////////////////








var searchParams = new URLSearchParams(window.location.search);

let assessmentname;

var userId = parseInt(searchParams.get("userId") || "0");
var assessmentId = parseInt(searchParams.get("surveyId") || "0");

console.log("userId", userId);
console.log("assessmentId", assessmentId);

function loadData() {
    fetch(window.__PATH__.appUrls.businessIntelligence + "api/process-api/sma/externaluserreport", {
        method: "POST",
        headers: {
            'Content-Type': 'application/json',
            "X-API-Endpoint": "U2FsdGVkX18LfRdV8Qu68Pd2hgFUlGaGeoILfBxpSvgXqdjlnq6wPsABDfSD5tiarMn7nczPfWuwkJn2CmhK/4gWEn6h3aeVH0Yh9RPB1BMcziJg4F5E3EtKVF0e3gI23MOX+fZi96YlfdgBTAhPiwivp6f3VSIq4BfjQ35LXAhcisCJH4I2hBIzYLiOOXfDq4x0JXy1PaxRaC7eBAWw9ayurD3iAve9VIFeRPlZqd8lVPCWX69R6fQwT9M34Tvw"
        },
        body: JSON.stringify({
            "userId": userId,
            "assessmentId": assessmentId
        })
    }).then(async (res) => {
        let data = await res.json();
        // this.dummydata = data;
        console.log("User Report", data.reportData);
        let category_length = data.reportData[0].subjects.length;

        console.log("total category", category_length);
        setupScreen(data);


    });

}
function setupScreen(responseData) {
    const reportData = responseData.reportData;
    console.log("dhfkshfskdjfh", reportData);
    const container = document.getElementById('surveyContainer');
    if (!container) {
        console.error("Container element not found.");
        return;
    }

    if (!Array.isArray(reportData) || reportData.length === 0) {
        console.error("No report data available.");

        const noDataMsg = document.createElement('h2');
        noDataMsg.textContent = 'No report data available.';
        noDataMsg.style.textAlign = 'center'; // Optional: center the message
        container.appendChild(noDataMsg);

        return;
    }

    container.className = 'surveyContainer';
    container.innerHTML = '';

    // Flex container for tabs and download icon
    const flexContainer = document.createElement('div');
    flexContainer.style.display = 'flex';
    flexContainer.style.justifyContent = 'space-between';
    flexContainer.style.alignItems = 'center';

    // Create Tabs
    const tabs = document.createElement('div');
    tabs.className = 'tabs';
    const tabUsers = document.createElement('button');
    tabUsers.textContent = 'My Report';
    tabUsers.className = 'tablinks';
    tabs.appendChild(tabUsers);
    flexContainer.appendChild(tabs);

    // Download icon button
    const downloadIcon = document.createElement('button');
    downloadIcon.className = 'download-btn';
    downloadIcon.innerHTML = '<i class="fas fa-download"></i>'; // Using Font Awesome icon
    downloadIcon.onclick = downloadCSVReport;
    flexContainer.appendChild(downloadIcon);

    container.appendChild(flexContainer);

    // Tab content container
    const usersContent = document.createElement('div');
    usersContent.id = 'Users';
    usersContent.className = 'tabcontent';
    container.appendChild(usersContent);

    // Default open Users Report
    usersContent.style.display = 'block';
    tabUsers.className += ' active';

    // Implementing tab logic
    tabUsers.onclick = function () {
        openTab('Users');
        const allTabs = document.querySelectorAll('.tablinks');
        allTabs.forEach(tab => tab.classList.remove('active'));
        tabUsers.classList.add('active');
    };

    function openTab(tabName) {
        let tabcontent = document.getElementsByClassName("tabcontent");
        let tablinks = document.getElementsByClassName("tablinks");
        for (let i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        for (let i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        event.currentTarget.className += " active";
    }

    // Function to handle the downloading logic
    function downloadCSVReport() {
        processDataAndDownloadCSV(reportData);
    }

    // Populate data into 'Users' tab
    populateUsersReport(usersContent, reportData);

    // Create chart containers and render charts
    // reportData.forEach((data, index) => {
    //     const chartContainer = document.createElement('div');
    //     chartContainer.id = `donutChart${index}`;
    //     usersContent.appendChild(chartContainer);

    //     // Assuming each data item corresponds to a separate chart
    //     renderChart(`#donutChart${index}`, data);
    // });
}


function populateUsersReport(usersContent, data) {
    const userHeaderRow = document.createElement('div');
    userHeaderRow.className = 'header-row';
    usersContent.appendChild(userHeaderRow);

    const userDetailsContainer = document.createElement('div');
    userDetailsContainer.id = 'userDetailsContainer';
    userDetailsContainer.className = 'details-container';
    usersContent.appendChild(userDetailsContainer);

    data.forEach(userReport => {
        const userName = userReport.userName;
        const averageScore = calculateAverageUserScore(userReport.subjects);
        const userButton = document.createElement('button');
        userButton.className = 'tab-button';
        userButton.textContent = `${userName} - Avg Score: ${averageScore}`;
        userButton.onclick = () => {
            const allButtons = usersContent.parentNode.querySelectorAll('.tab-button');
            allButtons.forEach(btn => btn.classList.remove('active-button'));
            userButton.classList.add('active-button');
            loadUserDetails(userName, userReport.subjects, userDetailsContainer);
        };
        userHeaderRow.appendChild(userButton);
    });
}

function calculateAverageUserScore(subjects) {
    let totalScore = 0;
    let totalCount = 0;

    subjects.forEach(subject => {
        subject.questions.forEach(question => {
            totalScore += question.score;
            totalCount++;
        });
    });

    return totalCount > 0 ? (totalScore / totalCount).toFixed(2) : "No Data";
}

function loadUserDetails(userName, userData, userDetailsContainer) {
    userDetailsContainer.innerHTML = ''; // Clear existing contents

    // Create container for two columns
    const twoColumnContainer = document.createElement('div');
    twoColumnContainer.className = 'two-column-container';
    twoColumnContainer.style.display = 'flex';

    // Create two columns within the container
    const leftColumn = document.createElement('div');
    leftColumn.className = 'left-column';
    leftColumn.style.flex = '1';

    const rightColumn = document.createElement('div');
    rightColumn.className = 'right-column';
    rightColumn.style.flex = '1';

    // Add both columns to the main container
    twoColumnContainer.appendChild(leftColumn);
    twoColumnContainer.appendChild(rightColumn);

    function createSubjectBox(subjectName, subjectData) {
        const subjectBox = document.createElement('div');
        subjectBox.className = 'subject-box';
        subjectBox.style.border = '1px solid #ccc';  // Adds a border to each subject box
        subjectBox.style.marginTop = '10px';
        subjectBox.style.marginRight = '4px';

        let totalScore = 0;
        let totalCount = 0;
        subjectData.questions.forEach(question => {
            totalScore += question.score;
            totalCount++;
        });

        const averageScore = totalCount > 0 ? (totalScore / totalCount).toFixed(2) : "No Data";

        const subjectHeader = document.createElement('div');
        subjectHeader.className = 'subject-header';
        subjectHeader.textContent = `${subjectData.subjectName} - Avg Score: ${averageScore}`;
        subjectBox.appendChild(subjectHeader);

        const questionsContainer = document.createElement('div');
        questionsContainer.className = 'questions-container';
        questionsContainer.style.marginBottom = '10px';

        subjectData.questions.forEach(question => {
            const questionDiv = document.createElement('div');
            questionDiv.className = 'question-score-container';

            const questionTextDiv = document.createElement('div');
            questionTextDiv.className = 'question-text';
            questionTextDiv.textContent = question.questionText;
            questionTextDiv.style.marginLeft = '10px';

            const progressBarContainer = document.createElement('div');
            progressBarContainer.className = 'progress-bar-container';
            progressBarContainer.style.marginLeft = '10px';

            const progressBar = document.createElement('div');
            progressBar.className = 'progress-bar';
            const questionScore = question.score;
            const maxScore = question.maxScore;
            const scoreRatio = maxScore > 0 ? (questionScore / maxScore) : 0;
            progressBar.style.width = `${scoreRatio * 100}%`;

            const scoreText = document.createElement('div');
            scoreText.className = 'score-text';
            scoreText.textContent = questionScore.toFixed(2);

            progressBarContainer.appendChild(progressBar);
            progressBar.appendChild(scoreText);
            questionDiv.appendChild(questionTextDiv);
            questionDiv.appendChild(progressBarContainer);
            questionsContainer.appendChild(questionDiv);
        });

        subjectBox.appendChild(questionsContainer);
        return subjectBox;
    }

    userData.forEach((subject, index) => {
        if (index % 2 === 0) {
            leftColumn.appendChild(createSubjectBox(subject.subjectName, subject));
        } else {
            rightColumn.appendChild(createSubjectBox(subject.subjectName, subject));
        }
    });

    // Add the main container to the details section
    userDetailsContainer.appendChild(twoColumnContainer);
}

function processDataAndDownloadCSV(reportData) {
    let csvContent = "data:text/csv;charset=utf-8,";
    csvContent += "User Name,Subject,Question,Score,Max Score\n"; // Header row

    reportData.forEach(userReport => {
        const userName = userReport.userName;

        userReport.subjects.forEach(subject => {
            const subjectName = subject.subjectName;

            subject.questions.forEach(question => {
                const questionText = question.questionText;
                const score = question.score;
                const maxScore = question.maxScore;
                csvContent += `${userName},${subjectName},${questionText},${score},${maxScore}\n`;
            });
        });
    });

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "user_report.csv");
    document.body.appendChild(link); // Required for FF

    link.click();
    document.body.removeChild(link); // Clean up after download
}

loadData();

const filteredCharts = response.Charts.value.filter(chart => chart.surveyId == assessmentId).map(chart => chart.ChartsId);

// console.log( "filter chart value" , filteredCharts);



const loadScript = (FILE_URL, async = true, type = "text/javascript", integrity = "", crossorigin = "") => {
    return new Promise((resolve, reject) => {
        try {
            const scriptEle = document.createElement("script");
            scriptEle.type = type;
            scriptEle.async = async;
            scriptEle.src = FILE_URL;

            if (integrity) {
                scriptEle.integrity = integrity;
            }

            if (crossorigin) {
                scriptEle.crossOrigin = crossorigin;
            }

            scriptEle.addEventListener("load", () => {
                resolve({ status: true });
            });

            scriptEle.addEventListener("error", () => {
                reject({
                    status: false,
                    message: `Failed to load the script ${FILE_URL}`
                });
            });

            document.body.appendChild(scriptEle);
        } catch (error) {
            reject(error);
        }
    });
};

loadScript("https://cdn.amcharts.com/lib/5/index.js")
    .then(() => loadScript("https://cdnjs.cloudflare.com/ajax/libs/apexcharts/3.49.1/apexcharts.min.js"))
    .then(() => loadScript("https://cdn.jsdelivr.net/npm/chart.js"))
    .then(() => loadScript("https://cdn.jsdelivr.net/npm/apexcharts"))
    .then(() => {
        loadChart();
    });

function loadChart() {
    fetch(window.__PATH__.appUrls.businessIntelligence + "api/process-api/sma/externaluserreport", {
        method: "POST",
        headers: {
            'Content-Type': 'application/json',
            "X-API-Endpoint": "U2FsdGVkX18LfRdV8Qu68Pd2hgFUlGaGeoILfBxpSvgXqdjlnq6wPsABDfSD5tiarMn7nczPfWuwkJn2CmhK/4gWEn6h3aeVH0Yh9RPB1BMcziJg4F5E3EtKVF0e3gI23MOX+fZi96YlfdgBTAhPiwivp6f3VSIq4BfjQ35LXAhcisCJH4I2hBIzYLiOOXfDq4x0JXy1PaxRaC7eBAWw9ayurD3iAve9VIFeRPlZqd8lVPCWX69R6fQwT9M34Tvw"
        },
        body: JSON.stringify({
            "userId": userId,
            "assessmentId": assessmentId
        })
    }).then(async (res) => {
        let data = await res.json();
        let category_length = data.reportData[0].subjects.length;
        const labels = data.reportData[0].subjects.map(subject => subject.subjectName);

        const scores = data.reportData[0].subjects.map(subject => {
            const totalScore = subject.questions.reduce((acc, question) => acc + question.score, 0);
            const totalMaxScore = subject.questions.reduce((acc, question) => acc + question.maxScore, 0);
            const percentage = (totalScore / totalMaxScore) * 100;
            return Math.round(percentage);
        });


        console.log("labels", labels);
        console.log("socres", scores);

        const assessmentname = data.reportData[0].assessmentName;
        const donutChart = document.querySelector("#donutChart");

        if (filteredCharts.includes('2')) {
            for (let i = 0; i < category_length; i++) {

                const canvas = document.createElement("canvas");
                canvas.setAttribute("id", "donutChart" + i);
                canvas.classList.add("chart-container");
                donutChart.appendChild(canvas);


                const percentage = scores[i];

                const data = {
                    labels,
                    datasets: [{
                        data: [percentage, 100 - percentage],
                        backgroundColor: ['#4db6ac', '#e0e0e0'],
                        hoverBackgroundColor: ['#4db6ac', '#e0e0e0'],
                        borderWidth: 0
                    }]
                };

                const options = {
                    cutout: '70%',
                    plugins: {
                        tooltip: {
                            enabled: false
                        },
                        legend: {
                            display: false
                        },
                        title: {
                            display: true,
                            text: `${labels[i]}: ${scores[i]}% `, // Dynamic title based on category
                            font: {
                                size: 16
                            },
                            padding: {
                                top: 20,
                                bottom: 30
                            }
                        }
                    }
                };

                const ctx = document.querySelector("#donutChart" + i);
                new Chart(ctx, {
                    type: 'doughnut',
                    data,
                    options
                });
            }
        }

        //     });
        // }

        if (filteredCharts.includes('1')) {



            const dataradar = {
                labels: labels,
                datasets: [{
                    label: 'Score percentage',
                    data: scores,  // Example data values
                    fill: true,
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgb(54, 162, 235)',
                    pointBackgroundColor: 'rgb(54, 162, 235)',
                    pointBorderColor: '#fff',
                    pointHoverBackgroundColor: '#fff',
                    pointHoverBorderColor: 'rgb(54, 162, 235)'
                }]
            };

            new Chart(document.querySelector("#chartContainer1"), {
                type: 'radar',
                // width:200,
                data: dataradar,
                options: {
                    elements: {
                        line: {
                            borderWidth: 3
                        }
                    },
                    scales: {
                        r: {
                            angleLines: {
                                display: true
                            },
                            suggestedMin: 0,
                            suggestedMax: 100
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top'
                        },

                        title: {
                            display: true,
                            text: assessmentname
                        }

                    }
                }
            });

        } // end of if for the radar chart


        if (filteredCharts.includes('3')) {



            // console.log("barchartid",filteredCharts );

            // const ctx = document.getElementById('myChart').getContext('2d');

            // document.querySelector("#chartContainer1"), {
            new Chart(document.querySelector("#barchart").getContext('2d'), {
                type: 'bar',
                data: {
                    labels: labels,

                    datasets: [{
                        label: "score percentage",
                        data: scores,
                        backgroundColor: function (context) {
                            const numBars = scores.length; // Get the number of bars
                            const colorHue = Math.floor(context.dataIndex * (360 / numBars)); // Calculate hue based on index and number of bars
                            return `hsla(${colorHue}, 100%, 50%, 0.2)`; // Generate color string in HSLA format
                        },
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    //  responsive: true, // Makes the chart responsive
                    //  maintainAspectRatio: false, // Allows resizing
                    scales: {
                        x: {
                            ticks: {
                                maxRotation: 0, // Reduce rotation to make labels more compact
                                minRotation: 0, // Ensure no rotation
                                width: 30,
                                padding: 5 // Adjust padding around labels if needed
                            }
                        },

                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                callback: function (value) {
                                    return value + '%';
                                }
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: assessmentname
                        }
                    }
                }


            });
        } // end of if for the bar chart



    });

}





