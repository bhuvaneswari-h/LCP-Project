This is the current js available 


var searchParams = new URLSearchParams(window.location.search);
var surveyId = parseInt(searchParams.get("surveyId") || "0");
var userId = parseInt(searchParams.get("userId") || "0");
var openId = parseInt(searchParams.get("isOpen") || "0");
var surveyUserId = parseInt(searchParams.get("surveyUserId") || "0");
var registerSuccess = parseInt(searchParams.get("registerSuccess") || "0");

// var openId = userId > 100000 ? 1 : 0;

console.log("surveyId", surveyId);
console.log("userId", userId);

function checkLockScreen(openId, surveyUserId, registerSuccess) {
  if (openId == 1 && registerSuccess == 1) return 'unlocked';
  else if (openId == 1 && surveyUserId == 0) return 'locked';
  else if (openId == 1 && userId < 100000) return 'unlocked';
  else if (openId == 0) return 'unlocked';
  return 'locked';
}

fetch(window.__PATH__.appUrls.businessIntelligence + "api/process-api/smasurvey/surveycatquesanswers", {
  method: "POST",
  headers: {
    'Content-Type': 'application/json',
    "X-API-Endpoint": "U2FsdGVkX1/1AVz6uCndFXpCDMSlYOG0SHkjoSOmJLkb9PC/IzjheowPdFP0xzTvqEwLfTMyn0CKR1+9ebfRX9BuAuSGXPbn0c+5RbRpKh0Rp0Zs9XGl8XwwhiXdpc2IR/x/r3AeTFgN8SB4THVOzJHjPKMsIbTmNw0zFI1l2sExWQdzp3PxsEv7hNQQ6T3xYiGWrlgYXoPb5HPo37SvdQprMP9av8EQn9WLaehho/SXsUjqb+Kl3a/qNMkXxPFO4mv/5hVIDaiXAakq3YcWGg=="
  },
  body: JSON.stringify({
    "isOpen": openId,
    "registerSuccess": registerSuccess,
    "surveyUserId": surveyUserId,
    "surveyId": surveyId,
    "userId": userId
  })
}).then(async (res) => {
  let data = await res.json();
  transformData(data.data);

  // console.log("respone",responseData);
});

function setupScreen(responseData) {
  const reportData = responseData;

  const container = document.getElementById('surveyContainer');
  if (!container) {
    console.error("Container element not found.");
    return;
  }

  if (!reportData) {
    console.error("No report data available.");

    const noDataMsg = document.createElement('h2');
    noDataMsg.textContent = 'No report data available.';
    noDataMsg.style.textAlign = 'center'; // Optional: center the message
    container.appendChild(noDataMsg);

    return;
  }


// Get the container element
const surveyContainer1 = document.getElementById('surveyContainer1');

// // Create an image element
// const image = document.createElement('img');
// image.src = 'https://journey36-alumni.s3.eu-west-2.amazonaws.com/attachmentfiles/163027697348068300.png'; // Replace with your actual image path
// image.alt = 'Descriptive image alt text';

// // Add the image to the container
// surveyContainer1.appendChild(image);


  container.className = 'surveyContainer';
  container.innerHTML = '';

  // Flex container for tabs and download icon
  const flexContainer = document.createElement('div');
  flexContainer.style.display = 'flex';
  flexContainer.style.justifyContent = 'space-between';
  flexContainer.style.alignItems = 'center';

  // Create Tabs
  const tabs = document.createElement('div');
  tabs.className = 'tabs';


  const tabCharts = document.createElement('button');
  tabCharts.textContent = 'Charts';
  tabCharts.className = 'tablinks';

  const tabUsers = document.createElement('button');
  tabUsers.textContent = 'Users Report';
  tabUsers.className = 'tablinks';

  
  tabs.appendChild(tabCharts);
  tabs.appendChild(tabUsers);

  flexContainer.appendChild(tabs);

  
    // Download icon button
    // const downloadIcon = document.createElement('button');
    // downloadIcon.className = 'download-btn';
    // downloadIcon.innerHTML = '<i class="fas fa-download"></i>'; // Using Font Awesome icon
    // downloadIcon.onclick = downloadCSVReport;
    // flexContainer.appendChild(downloadIcon);

    container.appendChild(flexContainer);

    // Tab content containers


    const chartContent = document.createElement('div');
    chartContent.id = 'Charts';
    chartContent.className = 'tabcontent';

    const usersContent = document.createElement('div');
    usersContent.id = 'Users';
    usersContent.className = 'tabcontent';


   
    container.appendChild(chartContent);
     container.appendChild(usersContent);

    // Default open Org Report
    // usersContent.style.display = 'block';
    // tabUsers.className += ' active';

    chartContent.style.display = 'block';
    tabCharts.className += ' active';

    tabCharts.onclick = function () {
        openTab('Charts');
        const allTabs = document.querySelectorAll('.tablinks');
        allTabs.forEach(tab => tab.classList.remove('active'));
        tabCharts.classList.add('active');
      
    };


    // Implementing tab logic

    tabUsers.onclick = function () {
        openTab('Users');
        const allTabs = document.querySelectorAll('.tablinks');
        allTabs.forEach(tab => tab.classList.remove('active'));
        tabUsers.classList.add('active');
    };

    function openTab(tabName) {
        let tabcontent = document.getElementsByClassName("tabcontent");
        let tablinks = document.getElementsByClassName("tablinks");
        for (let i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        for (let i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        event.currentTarget.className += " active";
    }

    // Function to handle the downloading logic based on the active tab
    function downloadCSVReport() {
        processDataAndDownloadCSV(reportData)
    }

      renderCharts(chartContent, reportData);

    // Populate data into 'Users' tab
    populateUsersReport(usersContent, reportData);

    // Populate data into 'Charts' tab
    // populateOrgReport(chartContent, reportData);
}

function populateUsersReport(usersContent, data) {

    const app = document.createElement('div');
    app.id = 'survey-result'
    usersContent.appendChild(app);

    data.forEach((categoryData, index) => {
        const container = document.createElement('div');
        container.classList.add('container');
        container.appendChild(createCard(categoryData, index));
        app.appendChild(container);
    });

}

function renderCharts(chartContent, data) {

function createLockIcon() {
    const lock = document.createElement('div');
    lock.classList.add('lock');
    lock.innerHTML = '&#x1f512;'; // Unicode for lock symbol
    return lock;
}




    // console.log("chart data", data);

    chartContent.innerHTML = ''; // Clear existing charts

    // Create a container for all charts
    const chartsDiv = document.createElement('div');
    chartsDiv.className = 'charts';

    // Create a container for the donut chart
    const donutChartBox = document.createElement('div');
    donutChartBox.className = 'chart-box';
    donutChartBox.id = 'donutChartBox';
    const donutChartDiv = document.createElement('div');
    donutChartDiv.id = 'donutChart';
    donutChartBox.appendChild(donutChartDiv);
    chartsDiv.appendChild(donutChartBox);

    // Create a container for the bar chart
    const barChartBox = document.createElement('div');
    barChartBox.className = 'chart-box';
    barChartBox.id = 'barChartBox';
    if (checkLockScreen(openId, surveyUserId, registerSuccess) == 'locked') {
        barChartBox.classList.add('blur');
        barChartBox.appendChild(createLockIcon());
    }
    const barChartCanvas = document.createElement('canvas');
    barChartCanvas.id = 'barchart';
    barChartBox.appendChild(barChartCanvas);
    chartsDiv.appendChild(barChartBox);

    // Create a container for the radar chart
    const radarChartBox = document.createElement('div');
    radarChartBox.className = 'chart-box';
    radarChartBox.id = 'radarChartBox';
    if (checkLockScreen(openId, surveyUserId, registerSuccess) == 'locked') {
        radarChartBox.classList.add('blur');
        radarChartBox.appendChild(createLockIcon());
    }
    const radarChartCanvas = document.createElement('canvas');
    radarChartCanvas.id = 'chartContainer1';
    radarChartCanvas.style.width = '100%';
    radarChartCanvas.style.height = '450px';
    radarChartCanvas.style.marginInline = 'auto';
    radarChartBox.appendChild(radarChartCanvas);
    chartsDiv.appendChild(radarChartBox);

    chartContent.appendChild(chartsDiv);

    // Now call loadChart function to render charts
    loadChart();
}





function transformData(data) {
    let obj = Object.values(data).map(category => {
        let questions = Object.values(category.questions);
        let totalScore = questions.reduce((acc, q) => acc + q.answers.selectedScore, 0);
        // let averageScore = totalScore / questions.length;
        let averageScore = (totalScore / questions.length).toFixed(2);
        return {
            category: category.categoryName,
            score: averageScore,
            items: questions.map(question => ({
                question: question.name,
                answer: question.answers.selectedScore,
                percentage: Math.round((question.answers.selectedScore / question.answers.totalScore) * 100)
            }))
        };
    });

    setupScreen(obj);

    // renderCards(obj);
}

function createCard(categoryData, index) {
    const card = document.createElement('div');
    card.classList.add('card');
    if (checkLockScreen(openId, surveyUserId, registerSuccess) == 'locked') {
        if (index > 0) {
            card.classList.add('locked');
            card.addEventListener('click', () => alert('Please register to view this category.'));
        }
    }
    const header = document.createElement('div');
    header.classList.add('header');
    const categoryName = document.createElement('div');
    categoryName.textContent = categoryData.category;
    const categoryScore = document.createElement('div');
    categoryScore.textContent = `Average: ${categoryData.score}`;
    header.appendChild(categoryName);
    header.appendChild(categoryScore);

    const body = document.createElement('div');
    body.classList.add('body');
    if (checkLockScreen(openId, surveyUserId, registerSuccess) == 'locked') {
        if (index > 0) body.classList.add('blur');
    }
    categoryData.items.forEach(item => {
        const itemContainer = document.createElement('div');
        itemContainer.classList.add('progress-container');
        const itemLabel = document.createElement('div');
        itemLabel.textContent = `${item.question}`; //- ${item.answer}
        itemContainer.appendChild(itemLabel);

        const progressBarContainer = document.createElement('div');
        progressBarContainer.classList.add('progress-bar-container');

        const progressBar = document.createElement('div');
        progressBar.classList.add('progress-bar');
        progressBar.style.width = `${item.percentage}%`;
        progressBar.textContent = `${item.answer}`;

        progressBarContainer.appendChild(progressBar);
        itemContainer.appendChild(progressBarContainer);

        //itemContainer.appendChild(progressBar);
        body.appendChild(itemContainer);
    });

    card.appendChild(header);
    card.appendChild(body);

    if (checkLockScreen(openId, surveyUserId, registerSuccess) == 'locked') {
        if (index > 0) {
            const lock = document.createElement('div');
            lock.classList.add('lock');
            lock.innerHTML = '&#x1f512;'; // Unicode for lock symbol
            card.appendChild(lock);
        }
    }

    return card;
}



The CSS is given below ,
.body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    flex-wrap: wrap;
}
#survey-result {
    display: flex;
    flex-wrap: wrap;
}
.container {
    width: 48%;
    box-sizing: border-box;
    padding: 10px;
}
.card {
    background-color: #e0f7fa;
    margin-bottom: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    position: relative;
}
.header {
    background-color: #00796b;
    color: #fff;
    padding: 10px;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}
.body {
    padding: 10px;
    background-color: #ffffff;
    border-bottom-left-radius: 8px;
    border-bottom-right-radius: 8px;
}
.progress-container {
    background-color: #e0f7fa;
    border-radius: 5px;
    overflow: hidden;
    margin-bottom: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 5px;
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
}
.progress-bar-container {
    position: relative;
    width: 100%;
    background-color: rgba(0,121,107,0.2);
    height: 25px;
    border-radius: 5px;
}
.progress-bar {
    height: 24px;
    background-color: #00796b;
    text-align: right;
    padding-right: 5px;
    color: #fff;
    line-height: 20px;
    flex-grow: 1;
    border-radius: 5px;
}
.blur {
    filter: blur(5px);
    pointer-events: none;
}
.lock {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 24px;
    color: #00796b;
    pointer-events: none;
}
.locked {
    position: relative;
    cursor: pointer;
}

/* Added from demo2 */
.surveyContainer {
    width: 100%;
    max-width: 1200px;
    margin: auto;
    background-color: #fff; /* White background for the container */
    box-shadow: 0 4px 8px rgba(0,0,0,0.1); /* Soft shadow for depth */
    padding: 20px;
    font-family: 'Inter', sans-serif;
    color: #01497C; /* Deep air color for text */

    margin-top: 25px;
}

/* Style for the tabs */
.tabs {
    overflow: hidden;
    background-color: #C6E7E4; /* Light water color for tabs background */
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
}

.tabs button {
    background-color: inherit;
    float: left;
    border: none;
    outline: none;
    cursor: pointer;
    padding: 14px 16px;
    transition: 0.3s;
    font-size: 17px;
    color: #01497C; /* Matching text color to the general text */
}

.tabs button:hover {
    background-color: #005E6A; /* Dark water color for hover */
    color: #fff; /* White text on hover */
}

.tabs button.active {
    background-color: #005E6A; /* Dark water color for active tab */
    color: #fff; /* White text for active tab */
}

/* Style for tab content */
.tabcontent {
    display: none;
    padding: 6px 12px;
    border: 1px solid #C6E7E4; /* Light water color for border */
    border-top: none;
    border-bottom-left-radius: 5px;
    border-bottom-right-radius: 5px;
    background-color: #f4f4f4; /* Very light grey for content background */
}

/* Style for specific content elements within tabs */
.item-title, .subject-header {
    font-family: 'Poppins', sans-serif;
    color: #005E6A; /* Dark water color for titles */
    font-size: 20px;
    padding: 10px;
}

.subject-header {
    background-color: #C6E7E4; /* Light water color for header background */
    color: #01497C; /* Deep air color for text */
    padding: 10px;
    margin-bottom: 15px; /* Increased space between headers and content */    
    cursor: pointer;
    font-weight: bold;
}

.details-container {
    margin-top: 20px;
    padding: 10px;
    background-color: #E9F6F4; /* Very light blue for the details background */
}

.details-container ul {
    list-style-type: disc;
    padding-left: 20px;
    margin: 0;
}

.details-container li {
    margin-bottom: 10px;
    padding: 5px 0;
}

.header-row {
    display: flex;
    flex-wrap: wrap;
    align-items: flex-start; /* Aligns items to the top */
    justify-content: start;
    padding: 10px 0;
}

.tab-button {
    margin-right: 10px;
    padding: 5px 10px;
    background-color: #f1f1f1;
    border: 1px solid #ccc;
    cursor: pointer;
    transition: 0.3s;
}

.tab-button:hover {
    background-color: #ddd;
}

.tab-button.active-button {
    background-color: #005E6A; /* Example blue color */
    color: white;
    border-color: #005E6A;
}

.download-btn {
    background-color: #4CAF50; /* Green background */
    border: none;
    color: white; /* White text */
    padding: 10px 20px; /* Padding around the text */
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
    margin: 4px 2px;
    transition: 0.3s;
    cursor: pointer;
    border-radius: 5px; /* Rounded corners */
    box-shadow: 0 2px 5px rgba(0,0,0,0.3); /* Shadow for 3D effect */
    width: 150px; /* Fixed width */
}

/* Hover effect for the button */
.download-btn:hover {
    background-color: #45a049; /* Darker shade of green */
}

/* Styles specific to the icon within the button */
.download-btn i {
    margin-right: 8px; /* Space between icon and text */
    font-size: 20px; /* Larger icon size */
}

.two-column-container {
    display: flex;
    gap: 20px;
}

.left-column, .right-column {
    flex: 1;
}

.subject-box {
    border: 1px solid #ccc;
    margin-top: 10px;
    margin-right: 4px;
    padding: 10px;
    background-color: #fff;
}

.chart-container {
    display: inline-block;
    vertical-align: top;
    margin: 10px;
    width: 230px !important;
    height: 230px !important;
}

#donutChart {
    display: flex;
    /* flex-direction: column; */
    overflow-x: auto;
}

#chartContainer {
    border: 1px solid #ddd;
    padding: 10px;
}

#barchart {
    display: none;
}

#chartContainer1 {
    width: 100%;
    height: auto;
    max-width: 100%;
}

.progress-bar {
    background-color: #C6E7E4; /* Light water color for progress bar background */
    border-radius: 5px;
    padding: 3px;
    width: 100%; /* Full width of the content area */
}

.progress-bar-fill {
    background-color: #2A6F97; /* Darker brand color for progress bar fill */
    height: 20px; /* Fixed height for the fill bar */
    border-radius: 2px;
    transition: width 0.5s ease-in-out; /* Smooth transition for animation */
}

.progress-bar-container {
    background-color: #ADD4E4; /* Light blue for the empty part of the bar */
    width: 70%; /* Adjust based on your layout */
    height: 20px;
    border-radius: 10px;
    overflow: hidden;
    position: relative;
}

.progress-bar {
    background-color: #005E6A; /* Dark water color for progress fill */
    height: 100%;
    transition: width 0.3s ease;
}

.progress-text {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: #ffffff;
    font-weight: bold;
}

.score-text {
    color: white;
}

.chart-box {
    border: 1px solid #ccc;
    margin: 10px;
    padding: 15px;
    background-color: #fff; /* White background for the chart boxes */
    box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* Light shadow for depth */
    border-radius: 8px; /* Rounded corners for the boxes */
}

.charts {
    display: flex;
    flex-direction: column;
    overflow: hidden;
    white-space: nowrap;
}


.lock {
    display: inline-block;
    font-size: 16px;
    color: #888;
    margin-left: 8px;
}

.tablinks.locked {
    color: #888; /* Change color or style for the locked tab */
    cursor: not-allowed; /* Change cursor to indicate disabled state */
}





.blurred {
    filter: blur(4px); /* Adjust the blur level as needed */
    pointer-events: none; /* Disable interactions if needed */
}


@media (max-width: 767px) {
    .container {
        width: 100%;
    }
}




And the html is 

<!-- you can write html here -->
<!-- json data accessible through "response." then your key -->
<!-- use < %- response.key.value.content % > for rendering rich text editor content-->
<div class="body">
     <div id="surveyContainer1" style="height :80px;width:1200px;margin-left:22px;background-image: url('https://journey36-alumni.s3.eu-west-2.amazonaws.com/attachmentfiles/163027697348068300.png'); background-size: cover; background-position: center;">
  </div>
    <div id="surveyContainer"></div>
</div>


Now i have also shared a image also in this chat  , If you look at it above the charts and user reports tab  , There is a field name as "Your results" .Now 
similar to the look in the image i need the fields in the page and append it in the js it self , So based on my request modify the code and give the 
correct code 